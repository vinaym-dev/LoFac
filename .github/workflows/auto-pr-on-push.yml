name: Auto PR on push to feature/*

on:
  repository_dispatch:
    types: [supercommit-pr-request]

concurrency:
  group: auto-pr-${{ github.event.client_payload.branch }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

jobs:
  create_pr:
    # Only run on feature/* branches
    if: startsWith(github.event.client_payload.branch, 'feature/')
    runs-on: ubuntu-latest

    env:
      JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}  # for dynamic Jira link

    steps:
      - name: Extract payload
        id: payload
        shell: bash
        run: |
          echo "branch=${{ github.event.client_payload.branch }}" >> "$GITHUB_OUTPUT"
          echo "sha=${{ github.event.client_payload.sha }}"       >> "$GITHUB_OUTPUT"
          # Normalize to the first line with CR stripped
          MSG="$(printf "%s" "${{ github.event.client_payload.message }}" | tr -d '\r' | head -n1)"
          echo "message=${MSG}"                                   >> "$GITHUB_OUTPUT"

      - name: Guard – missing branch
        if: ${{ steps.payload.outputs.branch == '' }}
        run: |
          echo "No branch provided in dispatch payload; skipping."
          exit 0

      - name: Guard – skip merge commits
        if: ${{ startsWith(steps.payload.outputs.message, 'Merge') }}
        run: |
          echo "Merge commit detected; skipping."
          exit 0

      - name: Verify commit message contains Validate Test
        id: statuscheck
        shell: bash
        run: |
          MSG="${{ steps.payload.outputs.message }}"
          if echo "$MSG" | grep -Eiq 'STATUS:[[:space:]]*Validate[[:space:]]+Test\b'; then
            echo "ok=yes" >> "$GITHUB_OUTPUT"
          else
            echo "ok=no" >> "$GITHUB_OUTPUT"
          fi

      - name: Guard – message not targeting Validate Test
        if: ${{ steps.statuscheck.outputs.ok != 'yes' }}
        run: |
          echo "Commit does not target Validate Test; skipping PR."
          exit 0

      - name: Derive base branch + Jira key + Jira host
        id: vars
        shell: bash
        run: |
          DEFAULT="${{ github.event.repository.default_branch }}"
          BRANCH="${{ steps.payload.outputs.branch }}"
          KEY=""
          if [[ "$BRANCH" =~ ([A-Z]+-[0-9]+) ]]; then
            KEY="${BASH_REMATCH[1]}"
          fi

          # Extract host from JIRA_BASE_URL (e.g., https://your.atlassian.net -> your.atlassian.net)
          JIRA_HOST="$(printf "%s" "${JIRA_BASE_URL:-}" | sed -E 's#^https?://([^/]+).*$#\1#')"

          echo "base=$DEFAULT"  >> "$GITHUB_OUTPUT"
          echo "key=$KEY"       >> "$GITHUB_OUTPUT"
          echo "jirahost=$JIRA_HOST" >> "$GITHUB_OUTPUT"

      - name: Check if PR already exists
        id: findpr
        uses: actions/github-script@v7
        env:
          BRANCH: ${{ steps.payload.outputs.branch }}
        with:
          script: |
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            const branch = process.env.BRANCH;
            const prs = await github.rest.pulls.list({
              owner, repo, head: `${owner}:${branch}`, state: 'open'
            });
            core.setOutput('exists', prs.data.length > 0 ? 'true' : 'false');

      - name: PR already exists → skip
        if: ${{ steps.findpr.outputs.exists == 'true' }}
        run: |
          echo "Open PR already exists for ${{ steps.payload.outputs.branch }}. Skipping."
          exit 0

      - name: Create PR via API
        if: ${{ steps.findpr.outputs.exists != 'true' }}
        uses: actions/github-script@v7
        env:
          BRANCH:  ${{ steps.payload.outputs.branch }}
          BASE:    ${{ steps.vars.outputs.base }}
          KEY:     ${{ steps.vars.outputs.key }}
          JIRAHOST:${{ steps.vars.outputs.jirahost }}
        with:
          script: |
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            const branch = process.env.BRANCH;
            const base = process.env.BASE;
            const key  = process.env.KEY;
            const host = process.env.JIRAHOST;

            // Title/body with or without a parsed key
            const title = key
              ? `${key} - Auto PR (Build → Validate Test)`
              : `Auto PR (Build → Validate Test) - ${branch}`;

            const lines = [
              key
                ? `Auto-created PR for **${key}** after Build → Validate Test transition.`
                : `Auto-created PR after Build → Validate Test transition.`,
              '',
              `Branch: ${branch}`
            ];

            if (key && host) {
              lines.push(`Jira: https://${host}/browse/${key}`);
            }

            const body = lines.join('\n');

            const pr = await github.rest.pulls.create({
              owner, repo, title, head: branch, base, body
            });
            core.info(`PR created: #${pr.data.number} ${pr.data.html_url}`);